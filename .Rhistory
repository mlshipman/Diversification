library(datasets)
data(iris)
head(iris)
select<-Sepal.Length(Species=="virginica")
select<-iris$Sepal.Length(iris$Species=="virginica")
select<-iris$Sepal.Length[iris$Species=="virginica"]
mean(select)
View(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
?tapply
?mtcars
with(mtcars, tapply(hp, cyl, mean))
z<-with(mtcars, tapply(hp, cyl, mean))
z[[8]]-z[[4]]
z[["8"]]-z[["4"]]
debug(ls)
ls
require(graphics)
mtcars
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?lm
((x-0.3)^2)*w
sum(((x-0.3)^2)*w)
sum(((x-0.0025)^2)*w)
sum(((x-1)^2)*w)
sum(((x-0.147)^2)*w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
lm(mtcars$mpg ~ mtcars$wt)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary.lm(y~x)
?coef
coef(lm(y~x))
?lm
anova(lm(y~x))
?lm
residuals(lm(y~x))
std(residuals(lm(y~x)))
sd(residuals(lm(y~x)))
summary.lm(lm(y~x))
model<-lm(mtcars$mpg~mtcars$wt)
mw<-mean(mtcars$wt)
?predict
?predict.lm
predict.lm(model,mv)
predict.lm(model,mw)
model
?predict.lm
predict(model,newdata=mv)
predict(model,newdata=mw)
new<-data.frame(wt=mw)
predict(model,newdata=new)
?lm
mpg<-mtcars$mpg
wt<-mtcars$wt
model<-lm(mpg~wt)
model
new<-data.frame(wt=mw)
new
predict(model,new,interval="predict")
?mtcars
new<-data.frame(wt=3)
predict(model,new,interval="predict")
summary.lm(model)
summary.lm(mpg~wt-1)
summary.lm(lm(mpg~wt-1))
summary.lm(lm(mpg~1))
require(graphics)
?lm
lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)
lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)$coefficients
lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)$coefficients[2]
lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)$coefficients[2]*4
lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)$coefficients[2]*4
lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)$coefficients[2]
lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)$coefficients
lm(mtcars$mpg ~ factor(mtcars$cyl))$coefficients
model1<-lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)
model2<-lm(mtcars$mpg ~ factor(mtcars$cyl))
anova(model1, model2)
anova(model2, model1)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)
lm(mpg ~ I(wt * 2) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y~x)
?hat
??hat
??hatdiagonal
?hatvalues
hatvalues(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344) ]
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
dfbeta(lm(y~x))
dfbetas(lm(y~x))
?dfbeta
?clear
require(graphics)
NoCars<-length(mtcars$mpg)
Regression Analysis - Motor Trend Assignment
========================================================
This report is a submission for Peer Assignment of the Coursera course "Regression Analysis"
# Summary
```{r} echo=FALSE
require(graphics)
NoCars<-length(mtcars$mpg)
```
Based on a dataset of `r MaxIntervalNo` cars, it has been analysed if an automatic or manual transmission is better for the mileage per gallon (MPG) and an estimate is provide on how big the impact is.
# Step 1 - Assessing the available data
library(kntir)
library(knitr)
mtcars
?mtcars
cor(mtcars)
?hcluster
??hcluster
d<-dist(mtcars)
hc<-hclust(d)
plot(d)
plot(hc)
lm(mtcars$hp~mtcars$cyl+mtcars$disp)
modelhp<-lm(mtcars$hp~mtcars$cyl+mtcars$disp)
summary.lm(modelhp)
modelhp<-lm(mtcars$hp~mtcars$disp)
summary.lm(modelhp)
modelhp<-lm(mtcars$hp~mtcars$cyl+mtcars$disp)
summary.lm(modelhp)
modelhp<-lm(mtcars$hp~mtcars$cyl+mtcars$disp+mtcars$carb+mtcars$vs)
summary.lm(modelhp)
?mtcars
library(knitr)
install.packages("knitr")
library(knitr)
library(AppliedPredictiveModeling) library(caret) data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
qplot(CompressiveStrength, data=training)
?qplot
qplot(x=(1:774), y=CompressiveStrenght, data=training)
qplot(x=(1:774), y=CompressiveStrength, data=training)
qplot(x=seq(774), y=CompressiveStrength, data=training)
qplot(x=seq(774), y=FlyAsh, data=training)
library(Hmisc)
?cut2
qplot(x=seq(774), y=FlyAsh, data=training, color=cut2(FlyAsh,4))
cut2(training$FlyAsh,4)
cut2(training$FlyAsh,cuts=4)
?cut2
cut2(training$FlyAsh,g=4)
cut2(training$FlyAsh,g=5)
qplot(x=seq(774), y=FlyAsh, data=training, color=cut2(FlyAsh,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(FlyAsh,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(Cement,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(BlastFurnaceSlag,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(water,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(Water,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(Superplacticizer,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(Superplasticizer,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(CoarseAggregate,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(FineAggregate,g=5))
qplot(x=seq(774), y=CompressiveStrength, data=training, color=cut2(Age,g=5))
qplot(SuperPlasticizer,data=training)
qplot(Superplasticizer,data=training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
AllCols<-colnames(training)
?grep
grepl("IL",AllCols)
IlTraining<-training[,grepl("IL",AllCols)]
IlTraining<-training[,grepl("^IL",AllCols)]
?PreProces
?PreProcess
?Preprocess
?preProcess
pp<-preProcess(IlTraining,method="pca")
pp
pp<-preProcess(IlTraining,method="pca", thresh=0.9)
pp
FilTraining<-cbind(IlTraining,training$diagnosis)
colnames(FilTraining)[13]<-"diag"
?predict
?train
directmodel<-train(diag~.,method="glm",data=FilTraining)
directmodel<-train(FilTraining$diag~.,method="glm",data=FilTraining)
install.packages("e1071")
library(e1071)
directmodel<-train(FilTraining$diag~.,method="glm",data=FilTraining)
directmodel
pp<-preProcess(IlTraining[,1:12],method="pca", thresh=0.8)
pcamodel<-train(pp,FilTraining$diag,method="glm")
pcamodel<-train(preProcess=pp,y=FilTraining$diag,method="glm")
directmodel<-train(FilTraining$diag~.,method="glm",data=FilTraining, preProcess=pp)
IlTest<-testing[,grepl("^Il", colnames(testing))]
grepl("^Il", colnames(testing))
?grepl
grepl("^IL", colnames(testing))
IlTest<-testing[,grepl("^IL", colnames(testing))]
testPC<-predict(pp,IlTest)
trainPC<-predict(pp,IlTraining)
pcamodel<-train(FilTraining$diag~.,method="glm",data=trainPC)
pcamodel
confusionMatrix(FilTesting$diag,predict(pcamodel,testPC))
confusionMatrix(testing$diag,predict(pcamodel,testPC))
install.packages("shiny")
libary(shiny)
library(shiny)
runExample("01_Hello")
runExample("02_Text")
#
source(shiny)
library(shiny)
source('~/R/R-Studio/resources/templates/shiny/ui.R', echo=TRUE)
?runExample
runExample("01_Hello", launch.browser=FALSE)
runExample("01_Hello")
?getMethod
?showMethods
?getClass
?getS3method
?dagmma
?dgamma
?lm
?colSums
?predict
setwd("~/R/Data/Markowitz")
runapp()
library(shiny)
runapp()
?runApp
runApp
runApp()
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
?fluidPage
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp()
runApp()
runApp()
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?solve()
?solve.QP()
?solve.QP
library(quadprog)
?solve.QP
?t
?solve.QP
?matrix
corr<-matrix(c(1,0.2,0.25, 0.2,1,0.15, 0.25,0.15,1), nrow = 3, ncol = 3)
corr
sigma<-c(0.25,0.2,0.15)
sigma %*% corr
sigma * corr
sigma * corr * sigma
sqrt(0.0625)
sqrt(0.04)
sqrt(0.15)
sqrt(0.0.0225)
sqrt(0.0225)
bigsigma<-sigma * corr * sigma
dvec<-c(0,0,0)
meq<-2
Amat<-matrix(c(1,1,1, 0.05,0.08,0.04, 0,0,0), nrow = 3, ncol = 3)
Amat
t(Amat)
bvec<-c(1,0.06,0)
solve.QP(bigsigma, dvec,Amat,bvec)
solved<-solve.QP(bigsigma, dvec,Amat,bvec)
solved$solution
sum(solved$solution)
sum(solved$solution*c(0.05,0.08,0.04))
sqrt(solved$value)
bvec<-c(1,0.03,0)
solved<-solve.QP(bigsigma, dvec,Amat,bvec)
solved
sqrt(solved$value)
bvec<-c(1,0.01,0)
solved<-solve.QP(bigsigma, dvec,Amat,bvec)
solved
sum(solved$solution*c(0.05,0.08,0.04))
bvec<-c(1,0.055,0)
solved<-solve.QP(bigsigma, dvec,Amat,bvec)
sum(solved$solution*c(0.05,0.08,0.04))
sqrt(solved$value)
solved<-solve.QP(bigsigma, dvec,Amat,bvec,meq=3)
sqrt(solved$value)
?solve.QP
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
?reactive
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
?reactive
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
10000*0.00015
10000*0.000015
mu<-(1:10000)*0.000015
tail(mu)
getvol<-function(vol1, vol2, vol3, return1, return2, return3, corr12, corr13, corr23, mu){
sigma<-c(vol1, vol2, vol3)/100
corr<-matrix(c(100, corr12, corr13, corr12, 100, corr23, corr13, corr23, 100), nrow=3, ncol=3)/100
bigsigma<-sigma*corr*sigma
Amat<-matrix(c(1,1,1, return1/100,return2/100,return3/100, 0,0,0), nrow = 3, ncol = 3)
bvec<-c(1,mu,0)
solved<-solve.QP(bigsigma, c(0,0,0),Amat,bvec,meq=3)
sqrt(solved$value)
}
vols<-calcvol<-getvol(input$vol1,input$vol2,input$vol3,input$return1,input$return2, input$return3, input$corr12, input$corr13, input$corr23,mu)
vols<-getvol(0.2,0.15,0.12,0.8,0.5, 0.4, 0.2, 0.3, 0.15,mu)
?lapply
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
?renderPlot
?plot
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer, mode=showcase)
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
?isolate
?actionButton
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer, display.mode="showcase")
runApp(launch.browser = rstudio::viewer)
setwd("~/R/Data/Diversification")
runApp(launch.browser = rstudio::viewer)
?plot
?plot
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
?plot
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
runApp(launch.browser = rstudio::viewer)
